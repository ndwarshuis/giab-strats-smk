from pathlib import Path
from snakemake.utils import min_version

# required to get snakemake to properly depickle a pydantic model
sys.path.extend(["./workflow/scripts/python"])
from common.config import GiabStrats
from common.functional import unzip2
from common.config import strip_full_refkey, RefKeyFull, Haplotype

min_version("7.20")

config = GiabStrats.parse_obj(config)


_alphanumdash = "[A-Za-z0-9-]+"
_alphanumdash_hap = "[A-Za-z0-9-]+(\.[mp]at)?"


wildcard_constraints:
    # permit alphanumerics and dashes only, underscores will be used for
    # separation in filepaths; this convention makes it impossible for
    # wildcards to be ambiguous
    ref_key=_alphanumdash,
    build_key=_alphanumdash,
    # separate ref key for downloading (which may or may not follow the
    # cardinality of the target reference)
    ref_src_key=_alphanumdash_hap,
    ref_final_key=_alphanumdash_hap,
    # this appears way too often, so define constraint here
    sex_chr="[XY]",


include: "rules/common.smk"
include: "rules/tools.smk"
include: "rules/ref.smk"
include: "rules/diploid.smk"
include: "rules/xy.smk"
include: "rules/low_complexity.smk"
include: "rules/gc.smk"
include: "rules/telomeres.smk"
include: "rules/functional.smk"
include: "rules/segdups.smk"
include: "rules/mappability.smk"
include: "rules/union.smk"
include: "rules/postprocess.smk"


# rule to download stuff to make testing pipeline faster (this only includes
# the big stuff, like .fa files and large bed files)
rule all_resources:
    input:
        rules.all_tools.output,
        expand(rules.download_ref.output, ref_src_key=config.all_ref_refsrckeys),
        expand(rules.download_gaps.output, ref_src_key=config.all_refkey_gap),
        expand(rules.download_rmsk.output, ref_src_key=config.all_refkey_rmsk),
        expand(rules.download_simreps.output, ref_src_key=config.all_refkey_simreps),
        expand(rules.download_censat.output, ref_src_key=config.all_refkey_censat),
        expand(rules.download_superdups.output, ref_src_key=config.all_refkey_segdups),
        expand(rules.download_cds.output, ref_src_key=config.all_refkey_cds),
        expand(rules.download_mhc.output, ref_src_key=config.all_refkey_mhc),
        expand(rules.download_kir.output, ref_src_key=config.all_refkey_kir),
        expand(rules.download_vdj.output, ref_src_key=config.all_refkey_vdj),
        expand(
            rules.download_bench_vcf.output
            + rules.download_bench_bed.output
            + rules.download_query_vcf.output,
            ref_src_key=(t := unzip2(config.all_buildkey_bench))[0],
            build_key=t[1],
        ),


rule all:
    input:
        rules.checksum_everything.output,
