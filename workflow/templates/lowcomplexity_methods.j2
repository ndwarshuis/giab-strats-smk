# METHODOLOGICAL INFORMATION

## Description of methods used to generate the stratifications

### Simple Repeats (perfect and imperfect)

Each of the `SimpleRepeat` files were generated directly from the reference
using a simple C program (`repseq`, see below) that loops through a fasta file
and creates a bed file whose regions represent all repeats that have subunits of
length 1 (homopolymer), 2 (diTR), 3 (triTR), or 4 (quadTR) basepairs long. These
bed files were subset to repeats less than given lengths (and in some cases to
complimentary base pairs) for subsequent steps.

These bed files were subtracted from one another to produce files representing
repeats of a given range using `subtractBed` (ie subtracting repeats less than
`X` from repeats less than `Y` produced a bed file representing repeats of
length `X` to `Y` assuming `Y > X`). These bed files were extended by 5 bases in
either direction with `slopBed` and then overlaps were merged using `mergeBed`.

This produced the following files:
{% for file in perfect_files %}
- `{{ file }}`
{-% endfor %}

Imperfect repeats were made using the same `repseq` generated bed files for just
homopolymers as described immediately above, but this time merging all repeats
within 1 base pair (`mergeBed` with `-d 1`) of each other before adding slop and
merging overlaps. The result of this is a set of regions that represent
homopolymers that may be interrupted by one non-homopolymer base.

These were subset to lengths at least 11 or 21 base pairs long:
{% for file in imperfect_files %}
- `{{ file }}`
{-% endfor %}

#### Combined Simple Repeats

We also created a special combination file with all imperfect homopolymers 11 or
more bases long, and all perfect homopolymers 7 or more bases long.

The steps to make this file were:
1. extend regions in the perfect homopolymer bed (with >=7bp) by 5 bases using
   `slopBed`
2. merge overlaps using `mergeBed`
3. combine with imperfect homopolymers (>= 11bp) using `multiIntersectBed`
   followed by `mergeBed`
   
This resulted in the following file:

{{ perfect_imperfect_file }}

This was then flipped using `complementBed` to create the following file:

{{ not_perfect_imperfect_file }}

### Satellites

TODO change this depending on what we have as inputs.

#### Censat Source

{{ censat_src }}

This bed file was filtered for for values in column {{ sat_col}} which
started with "ct", then overlapping regions were merged with `mergeBed`.

#### Repeat Masker Source

{{ rmsk_src }}

This bed file was then filtered for the "Satellite" class in {{ rmsk_col }}.
Overlapping regions were then merged with `mergeBed`.

#### Merging

Regions were extended by 5 base pairs in either direction using `slopBed`.
Overlaps were then merged using `mergeBed`. This resulted in the following:

{{ sat_file }}

This was then complemented with `complementBed` to produce the following:

{{ not_sat_file }}

### All Tandem Repeats and Homopolymers

#### Repeat Masker Source

{{ rmsk_src }}

#### Tandem Repeat Finder Source

{{ trf_src }}

#### Processing

The following repeat files were combined by sequentially applying
`multiIntersectBed`, `slopBed` with `-b 5`, and `mergeBed`:

- Repeat Masker regions from classes "Low_complexity" and "Simple_Repeat" from
  above
- Tandem Repeat Finder regions from above
- Satellites from the previous section
- Simple Repeats:
  - dinucleotide repeats >= 10 base pairs
  - trunucleotide repeats >= 14 base pairs
  - quadnucleotide repeats >= 19 base pairs

These were then filtered by various lengths followed by removal of imperfect and
perfect repeats (see above section "Combined Simple Repeats") using
`subtractBed`. This produced the following filtered tandem repeat files:
{% for file in all_tr_filtered_files %}
- `{{ file }}`
{-% endfor %}

Each of these was combined using `multiIntersectBed` and `mergeBed` to produce
the following unfiltered tandem repeat file:

{{ all_tr_file }}

This was then combined using `multiIntersectBed` and `mergeBed` with the
perfect/imperfect homopolymer file to produce the following file with all
repeats (including homopolymers):

{{ all_repeat_file }}

These files were then complemented using `complementBed` to produce the
following:

{{ not_all_tr_file }}
{{ not_all_repeat_file }}

## Software

### repseq

This is a small C program that was compiled on-the-fly during pipline runtime.

Its source can be found here:

{{ repseq_src }}

### Other deps
{% for dep, version in deps.items() %}
- {{ dep }}: version {{ version }}
{%- endfor %}
